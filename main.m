% The following code snippet shows how data is generated for all
% combination of |theta1| and |theta2| values and saved into a matrix to be
% used as training data. The reason for saving the data in two matrices is
% explained in the following section.

l1 = 10; % length of first arm
l2 = 7; % length of second arm
l3 = 4; % length of third arm

nr_p = 50;

theta1 = linspace(0, pi/4, nr_p); % all possible theta1 values
theta2 = linspace(0, pi/2, nr_p); % all possible theta2 values
theta3 = linspace(0, pi/4, nr_p); % all possible theta3 values

% [THETA1,THETA2] = meshgrid(theta1,theta2);
[THETA1,THETA2,THETA3] = meshgrid(theta1,theta2,theta3);

X = l1 * cos(THETA1) + l2 * cos(THETA1 + THETA2) + l3 * cos(THETA1 + THETA2 + THETA3); % compute x coordinates
Y = l1 * sin(THETA1) + l2 * sin(THETA1 + THETA2) + l3 * sin(THETA1 + THETA2 + THETA3); % compute y coordinates

% X = l1 * cos(THETA1) + l2 * cos(THETA1 + THETA2);
% Y = l1 * sin(THETA1) + l2 * sin(THETA1 + THETA2);

data1 = [X(:) Y(:) THETA1(:)]; % create x-y-theta1 dataset
data2 = [X(:) Y(:) THETA2(:)]; % create x-y-theta2 dataset
data3 = [X(:) Y(:) THETA3(:)]; % create x-y-theta3 dataset

%%
train_data1 = data1(1:2:end,:);
train_data2 = data2(1:2:end,:);
% train_data3 = data3(1:2:end,:);
val_data1 = data1(2:2:end,:);
val_data2 = data2(2:2:end,:);
% val_data3 = data3(2:2:end,:);

%%
TRAIN_P = 80;
PARTS = 25;
GROUP_SIZE = length(data1)/PARTS;

all_points = 1:length(data1);

parts = reshape(all_points, [PARTS, GROUP_SIZE]);

train_points = [];
val_points = [];
test_points = [];
for i = 1:PARTS
    t = datasample(parts(i,:),floor(TRAIN_P/100*GROUP_SIZE), 'Replace', false);
    rest = setdiff(parts(i,:), t);
    
    v = datasample(rest,floor(size(rest,2)/2), 'Replace', false);
    tp = setdiff(rest, v);
    
    train_points = [train_points t];
    val_points = [val_points v];
    test_points = [test_points tp];
end
%% load the points into data sets
train_data1 = data1(train_points, :);
train_data2 = data2(train_points, :);
train_data3 = data3(train_points, :);

val_data1 = data1(val_points, :);
val_data2 = data2(val_points, :);
val_data3 = data3(val_points, :);

test_data1 = data1(test_points, :);
test_data2 = data2(test_points, :);
test_data3 = data3(test_points, :);

%% save train/val/test data sets
save('train_points', 'train_points');
save('val_points', 'val_points');
save('test_points', 'test_points');

%% load train/val/test data points
load('train_points');
load('val_points');
load('test_points');
%%
% The following plot shows all the X-Y data points generated by cycling
% through different combinations of |theta1| and |theta2| and deducing x
% and y coordinates for each. The plot can be generated by using the
% code-snippet shown below. The plot is illustrated further for easier
% understanding.
%
figure
subplot(3,1,1);
plot(train_data1(:,1), train_data1(:,2),'r.','linewidth',1);
axis equal;
xlabel('X','fontsize',10)
ylabel('Y','fontsize',10)
title('3 link train data','fontsize',10)
% hold on;
subplot(3,1,2);
plot(val_data1(:,1), val_data1(:,2),'b.','linewidth',1);
axis equal;
xlabel('X','fontsize',10)
ylabel('Y','fontsize',10)
title('3 link validation data','fontsize',10)

subplot(3,1,3);
plot(test_data1(:,1), test_data1(:,2),'k.','linewidth',1);
axis equal;
xlabel('X','fontsize',10)
ylabel('Y','fontsize',10)
title('3 link test data','fontsize',10)
%
% <<../invkine_grid.png>>
%
%%
plot(X(:),Y(:),'r.');
axis equal;
xlabel('X','fontsize',10)
ylabel('Y','fontsize',10)
title('2 link arm workspace','fontsize',10)
%%
opt = genfisOptions('SubtractiveClustering',...
                    'ClusterInfluenceRange',0.2);

fismat=genfis(train_data1(:,1:2),train_data1(:,3),opt);

opt = anfisOptions;
opt.InitialFIS = fismat;
opt.EpochNumber = 300;
epoch = 1:300;
opt.DisplayANFISInformation = 0;
opt.DisplayErrorValues = 0;
opt.DisplayStepSize = 0;
opt.DisplayFinalResults = 0;

% Train an ANFIS system using the first set of training data, |data1|.
disp('--> Training first ANFIS network.')

opt.ValidationData = val_data1;

[anfis1,trnErr,ss,anfis12,chkErr] = anfis(train_data1,opt);

figure
plot(epoch,trnErr,'o-b',epoch,chkErr,'x-r')
disp('--> Finished training first ANFIS network.')
%%
opt = genfisOptions('SubtractiveClustering',...
                    'ClusterInfluenceRange',0.2);

fismat=genfis(train_data2(:,1:2),train_data2(:,3),opt);

opt = anfisOptions;
opt.InitialFIS = fismat;
opt.EpochNumber = 300;
epoch = 1:300;
opt.DisplayANFISInformation = 0;
opt.DisplayErrorValues = 0;
opt.DisplayStepSize = 0;
opt.DisplayFinalResults = 0;

disp('--> Training second ANFIS network.')
% opt.InitialFIS = 25; % grid partitioning
opt.ValidationData = val_data2;

[anfis2,trnErr,ss,anfis22,chkErr] = anfis(train_data2,opt);

figure
plot(epoch,trnErr,'o-b',epoch,chkErr,'x-r')
disp('--> Finished training second ANFIS network.')
%%
% Change the number of input membership functions and train an ANFIS system
% using the third set of training data, |data3|.
tic
opt = genfisOptions('SubtractiveClustering',...
                    'ClusterInfluenceRange',0.2);

fismat=genfis(train_data3(:,1:2),train_data3(:,3),opt);

opt = anfisOptions;
opt.InitialFIS = fismat;
opt.EpochNumber = 300;
epoch = 1:300;
opt.DisplayANFISInformation = 0;
opt.DisplayErrorValues = 0;
opt.DisplayStepSize = 0;
opt.DisplayFinalResults = 0;

disp('--> Training third ANFIS network.')
% opt.InitialFIS = 25; % grid partitioning
opt.ValidationData = val_data3;

[anfis3,trnErr,ss,anfis32,chkErr] = anfis(train_data3,opt);

figure
plot(epoch,trnErr,'o-b',epoch,chkErr,'x-r')
disp('--> Finished training third ANFIS network.')
train_time = toc

%% save training
save('anfis1', 'anfis1');
%%
save('anfis2', 'anfis2');
%%
save('anfis3', 'anfis3');
%%
load('anfis1');
load('anfis2');
load('anfis3');