function [Y,Xf,Af] = MLP_2joints(X,~,~)
%MLP_2JOINTS neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 04-Mar-2019 12:27:35.
% 
% [Y] = MLP_2joints(X,~,~) takes these arguments:
% 
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 2.12132034355964;
x1_step1.gain = 0.134420529655955;
x1_step1.ymin = -1;

% Layer 1
b1 = [13.890455576566186124;32.712230544438178015;17.783917713250279036;-26.445190502322208914;0.36610920755644466018;7.662353719393971474;-1.8518462251862271017;0.34132091009061027442;-9.5294449945601318319;10.542579210408801416;8.1541962930851088487;-0.75303077906535564878;1.6988980149417134413;-7.8648741554366532469;10.005628206111408574];
IW1_1 = [-9.3151560305403098283;-30.567471444267585667;-11.162986389125336473;21.244725895217719369;0.020861599074384527819;-3.9832619079507676219;1.0618540101460618441;1.1158314144341863194;8.7204529018737151347;-12.038103262189199683;-3.5739512752983895183;-1.7516881449744248211;-3.9888201032670389523;2.1729771452914152796;-2.1438360058217842408];
IW1_2 = [-0.78159009171240001468;-0.64749246613033784037;-1.0606029101290295191;1.1886014703234240031;-0.078373096214884932498;-0.5340270686792453203;0.22330578748644891451;0.053155952899581450366;0.66253065320323289988;-0.46812195632776848475;-0.57546042961044774344;0.086711007186300398386;-0.011095710074151656985;0.55151144669689189382;-0.72777853717111384846];

% Layer 2
b2 = [12.803952816259764447;-15.290275163867960373];
LW2_1 = [6.552969333754983694 -2.0394937570333695476 -7.5504843186672534472 2.59104750406664186 7.1962488435138869391 -5.7755342742584829807 3.7293957646547766238 -4.6283709452380348282 -0.067649623706888803443 0.07900882623887049705 7.9946920500733780202 0.69469010354615512437 0.29775898225690583532 6.9999779408093978361 1.531386481121209675;-7.817167196595045553 2.3870451450231584545 9.0296754751668384387 -3.099463977335070286 -11.366712788343761531 7.1522541020058731931 -4.5761389057505876821 4.1094057595300137464 0.085498129801920591531 -0.086573215621456867108 -10.003069266550378202 -0.61917619124394418506 -0.34639476053012963064 -9.1607798865209417727 -2.1464112657328109357];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [2.54647908947033;1.27323954473516];
y1_step1.xoffset = [0;0];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1 + IW1_2*X{2,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(2,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
