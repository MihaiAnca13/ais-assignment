function [Y,Xf,Af] = MLP_2joints(X,~,~)
%MLP_2JOINTS neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 18-Mar-2019 14:29:06.
% 
% [Y] = MLP_2joints(X,~,~) takes these arguments:
% 
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 2.12132034355964;
x1_step1.gain = 0.134420529655955;
x1_step1.ymin = -1;

% Layer 1
b1 = [21.686797031399176916;-10.04969862442292694;-35.283092701684381609;-1.6777021471710678036;-44.859517154955121043;-10.792715733915544618;-4.8692229597469340874;14.320821104930896439;-0.83698039932442835909;0.19165655519130631035;0.46249595234271101418;-3.4231155380130307009;-2.435254543267376004;1.0578733689175099375;3.1456980479979628207];
IW1_1 = [-19.59589000057266972;0.35954219433448142418;26.327341264546742394;0.94137467153005671694;24.730444758676437544;12.390420653943280627;1.9903177843875361486;-15.111707001012669949;3.9075161764272747789;-3.1052174499671605368;-2.7293930212929797818;1.3627601666483881715;-1.2155439374809711151;0.33326393367713375016;-1.4095829052058310715];
IW1_2 = [-0.3907226158008157979;0.14900744763254494818;1.7982148515358242769;0.046919337727924732839;2.8827141874456745363;0.034811963896255911088;0.34224068119259298815;-0.58872747937778346916;-0.17744585344056429399;0.13039631257776307383;0.10935729093853682747;0.20256695690405115973;0.090886754534300090436;-0.017614801057917114924;-0.44125622154920551843];

% Layer 2
b2 = [8.7616492416876496918;-4.4480018392263307447];
LW2_1 = [-7.0776781531616279608 -8.7841939741137782249 3.6525554208351023178 -10.980674564342502109 4.4895803883244758126 0.29726874243067147319 -3.0232878916941103853 -0.055427040026105434123 -1.3031020207580561454 2.9494878431365054716 -5.7499848670685560492 12.718378780787713112 0.69322577417522635024 -1.8765926483216228693 -0.49474866664909056269;10.154502999573928435 5.2853218175985219318 -4.6708352204230667581 21.471358033337143212 -5.2899871759876608834 -0.45642585866841162145 5.0200903037487387692 0.10176446035825030545 2.3027047079525040374 -5.1102098630432344351 10.073885967852010737 -20.230220433946481506 -2.5871979682280294988 -14.039974869358028187 0.60697135770869925508];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [2.54647908947033;1.27323954473516];
y1_step1.xoffset = [0;0];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1 + IW1_2*X{2,ts});
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(2,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
